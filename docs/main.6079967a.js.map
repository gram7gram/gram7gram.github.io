{"version":3,"sources":["js/main.js"],"names":["download","output","name","string","li","document","createElement","href","setAttribute","encodeURIComponent","innerText","appendChild","cleanRow","row","content","Object","entries","forEach","key","value","trim","parseItems","sheet","end","split","data","XLSX","utils","sheet_to_json","range","map","total","length","parseStrings","json","parseExpGold","parseAchievements","parseRanks","parseCharactersInfo","parseLvlUp","parse","buffer","workbook","read","type","handlers","values","handler","Sheets","undefined","sheets","keys","init","upload","getElementById","addEventListener","e","file","target","files","innerHTML","reader","FileReader","readAsArrayBuffer","onload","result","JSON","stringify","onprogress","progress","loaded","console","log","onerror","error","window"],"mappings":";AAgMA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAhMA,IAAMA,EAAW,SAACC,EAA6B,GAAnBC,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,OAC1BC,EAAKC,SAASC,cAAc,MAC5BC,EAAOF,SAASC,cAAc,KACpCC,EAAKC,aAAa,OAAQ,iCAAmCC,mBAAmBN,IAChFI,EAAKC,aAAa,WAAYN,GAC9BK,EAAKG,UAAYR,EAEjBE,EAAGO,YAAYJ,GACfN,EAAOU,YAAYP,IAGfQ,EAAW,SAAAC,GACTC,IAAAA,EAAU,GAMTA,OAJPC,OAAOC,QAAQH,GAAKI,QAAQ,SAAkB,GAAA,IAAA,EAAA,EAAA,EAAA,GAAhBC,EAAgB,EAAA,GAAXC,EAAW,EAAA,GAC5CL,EAAQI,GAAO,GAAGC,OAAAA,GAAQC,SAGrBN,GAGHO,EAAa,SAACC,GAEZC,IAAAA,EAAMD,EAAM,QAAQE,MAAM,KAAK,GAM/BC,EAJOC,KAAKC,MAAMC,cAAcN,EAAO,CAC3CO,MAAaN,MAAAA,OAAAA,KAGGO,IAAIlB,GAEf,MAAA,CACLmB,MAAON,EAAKO,OACZP,KAAAA,IAIEQ,EAAe,SAACX,GAEdY,IAIAT,EAJOC,KAAKC,MAAMC,cAAcN,EAAO,CAC3CO,MAAOP,EAAM,UAGGQ,IAAIlB,GAEf,MAAA,CACLmB,MAAON,EAAKO,OACZP,KAAAA,IAIEU,EAAe,SAACb,GAEdC,IAAAA,EAAMD,EAAM,QAAQE,MAAM,KAAK,GAM/BC,EAJOC,KAAKC,MAAMC,cAAcN,EAAO,CAC3CO,MAAaN,MAAAA,OAAAA,KAGGO,IAAIlB,GAEf,MAAA,CACLmB,MAAON,EAAKO,OACZP,KAAAA,IAIEW,EAAoB,SAACd,GAEnBY,IAIAT,EAJOC,KAAKC,MAAMC,cAAcN,EAAO,CAC3CO,MAAOP,EAAM,UAGGQ,IAAIlB,GAEf,MAAA,CACLmB,MAAON,EAAKO,OACZP,KAAAA,IAIEY,EAAa,SAACf,GAEZY,IAIAT,EAJOC,KAAKC,MAAMC,cAAcN,EAAO,CAC3CO,MAAOP,EAAM,UAGGQ,IAAIlB,GAEf,MAAA,CACLmB,MAAON,EAAKO,OACZP,KAAAA,IAIEa,EAAsB,SAAChB,GAErBY,IAIAT,EAJOC,KAAKC,MAAMC,cAAcN,EAAO,CAC3CO,MAAOP,EAAM,UAGGQ,IAAIlB,GAEf,MAAA,CACLmB,MAAON,EAAKO,OACZP,KAAAA,IAIEc,EAAa,SAACjB,GAEZY,IAIAT,EAJOC,KAAKC,MAAMC,cAAcN,EAAO,CAC3CO,MAAOP,EAAM,UAGGQ,IAAIlB,GAEf,MAAA,CACLmB,MAAON,EAAKO,OACZP,KAAAA,IAIEe,EAAQ,SAACC,GAETC,IAAAA,EAAWhB,KAAKiB,KAAKF,EAAQ,CAAEG,KAAM,WAEnCC,EAAW,CACDxB,aAAAA,EACHY,QAAAA,EACYE,sBAAAA,EACPC,aAAAA,EACEC,iBAAAA,EACCC,gBAAAA,EACVC,MAAAA,GAGLO,EAAS,GAUR,OARP/B,OAAOC,QAAQ6B,GAAU5B,QAAQ,SAAqB,GAAA,IAAA,EAAA,EAAA,EAAA,GAAnBf,EAAmB,EAAA,GAAb6C,EAAa,EAAA,GAC9CzB,EAAQoB,EAASM,OAAO9C,QAChB+C,IAAV3B,IACFwB,EAAO5C,GAAQ6C,EAAQzB,MAKpB,CACLwB,OAAAA,EACAI,OAAQnC,OAAOoC,KAAKN,KAIlBO,EAAO,WACLC,IAAAA,EAAShD,SAASiD,eAAe,UACjCrD,EAASI,SAASiD,eAAe,UAEvCD,EAAOE,iBAAiB,SAAU,SAACC,GAC3BC,IAAAA,EAAOD,EAAEE,OAAOC,MAAM,GACxB,IAACF,EAAM,OAAO,EAElBxD,EAAO2D,UAAY,GAEbC,IAAAA,EAAS,IAAIC,WACnBD,EAAOE,kBAAkBN,GAEzBI,EAAOG,OAAS,WACRC,IAAAA,EAASzB,EAAMqB,EAAOI,QAE5BA,EAAOf,OAAOjC,QAAQ,SAAAK,GACdY,IAAAA,EAAO+B,EAAOnB,OAAOxB,GACrBnB,EAAS+D,KAAKC,UAAUjC,EAAM,KAAM,GAE1ClC,EAASC,EAAQ,CACfC,KAASoB,GAAAA,OAAAA,EADM,SAEfnB,OAAAA,OAKN0D,EAAOO,WAAa,SAACZ,GACba,IAAAA,EAAWb,EAAEzB,MAAQ,EAAKyB,EAAEc,OAASd,EAAEzB,MAAQ,EACrDwC,QAAQC,IAAI,CAAEH,SAAAA,KAGhBR,EAAOY,QAAU,WACfF,QAAQC,IAAIX,EAAOa,WAMzBC,OAAOpB,iBAAiB,OAAQH","file":"main.6079967a.js","sourceRoot":"..","sourcesContent":["const download = (output, { name, string }) => {\n  const li = document.createElement('li');\n  const href = document.createElement('a');\n  href.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(string));\n  href.setAttribute('download', name);\n  href.innerText = name;\n\n  li.appendChild(href);\n  output.appendChild(li);\n}\n\nconst cleanRow = row => {\n  const content = {}\n\n  Object.entries(row).forEach(([key, value]) => {\n    content[key] = `${value}`.trim()\n  })\n\n  return content;\n}\n\nconst parseItems = (sheet) => {\n\n  const end = sheet['!ref'].split(':')[1]\n\n  const json = XLSX.utils.sheet_to_json(sheet, {\n    range: `A2:${end}`\n  })\n\n  const data = json.map(cleanRow)\n\n  return {\n    total: data.length,\n    data,\n  }\n}\n\nconst parseStrings = (sheet) => {\n\n  const json = XLSX.utils.sheet_to_json(sheet, {\n    range: sheet['!ref']\n  })\n\n  const data = json.map(cleanRow)\n\n  return {\n    total: data.length,\n    data,\n  }\n}\n\nconst parseExpGold = (sheet) => {\n\n  const end = sheet['!ref'].split(':')[1]\n\n  const json = XLSX.utils.sheet_to_json(sheet, {\n    range: `A2:${end}`\n  })\n\n  const data = json.map(cleanRow)\n\n  return {\n    total: data.length,\n    data,\n  }\n}\n\nconst parseAchievements = (sheet) => {\n\n  const json = XLSX.utils.sheet_to_json(sheet, {\n    range: sheet['!ref']\n  })\n\n  const data = json.map(cleanRow)\n\n  return {\n    total: data.length,\n    data,\n  }\n}\n\nconst parseRanks = (sheet) => {\n\n  const json = XLSX.utils.sheet_to_json(sheet, {\n    range: sheet['!ref']\n  })\n\n  const data = json.map(cleanRow)\n\n  return {\n    total: data.length,\n    data,\n  }\n}\n\nconst parseCharactersInfo = (sheet) => {\n\n  const json = XLSX.utils.sheet_to_json(sheet, {\n    range: sheet['!ref']\n  })\n\n  const data = json.map(cleanRow)\n\n  return {\n    total: data.length,\n    data,\n  }\n}\n\nconst parseLvlUp = (sheet) => {\n\n  const json = XLSX.utils.sheet_to_json(sheet, {\n    range: sheet['!ref']\n  })\n\n  const data = json.map(cleanRow)\n\n  return {\n    total: data.length,\n    data,\n  }\n}\n\nconst parse = (buffer) => {\n\n  let workbook = XLSX.read(buffer, { type: 'buffer' })\n\n  const handlers = {\n    'Item Stats': parseItems,\n    'Strings': parseStrings,\n    'Experience and Gold': parseExpGold,\n    'Achievements': parseAchievements,\n    'Ranks And Game': parseRanks,\n    'Characters_info': parseCharactersInfo,\n    'LvlUp': parseLvlUp,\n  }\n\n  const values = {}\n\n  Object.entries(handlers).forEach(([name, handler]) => {\n    const sheet = workbook.Sheets[name];\n    if (sheet !== undefined) {\n      values[name] = handler(sheet);\n    }\n\n  })\n\n  return {\n    values,\n    sheets: Object.keys(handlers)\n  }\n}\n\nconst init = () => {\n  const upload = document.getElementById('upload')\n  const output = document.getElementById('output')\n\n  upload.addEventListener('change', (e) => {\n    const file = e.target.files[0];\n    if (!file) return false;\n\n    output.innerHTML = ''\n\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = () => {\n      const result = parse(reader.result);\n\n      result.sheets.forEach(sheet => {\n        const json = result.values[sheet];\n        const string = JSON.stringify(json, null, 2)\n\n        download(output, {\n          name: `${sheet}.json`,\n          string\n        })\n      })\n    }\n\n    reader.onprogress = (e) => {\n      const progress = e.total > 0 ?  e.loaded / e.total : 0;\n      console.log({ progress });\n    }\n\n    reader.onerror = () => {\n      console.log(reader.error);\n\n    }\n  })\n}\n\nwindow.addEventListener('load', init);\n"]}